; https://git-scm.com/docs/git-config

[user]
  name = {{ .name | quote }}
  email = {{ .email | quote }}

[advice]
  detachedHead = false

[branch]
  sort = -committerdate

[column]
  ui = auto

[commit]
  verbose = true

[core]
  editor = code --wait
  pager = delta --color-only

  ; Centralized ignore patterns enable repository-agnostic exclusions.
  ; Applies patterns before consulting .gitignore, reducing parse overhead
  ; for common exclusions like editor temp files and build artifacts.
  ;
  excludesFile = ~/.config/git/excludes

  ; Attributes file defines path-specific handling rules for Git filters,
  ; merges, and diffs. Centralizes configuration for binary file handling,
  ; line ending normalization, and content filtering operations.
  ;
  attributesFile = ~/.config/git/attributes

  ; Repository format defines internal storage layout version. Version 1
  ; enables extended features like alternates mechanism, quarantine, and
  ; multi-pack-index while maintaining compatibility.
  ;
  repositoryFormatVersion = 1

[credential]
  ; Git Credential Manager implements secure credential storage through system
  ; keychain integration. Supports multiple authentication protocols (basic,
  ; OAuth, SSH) with protocol-specific credential encryption. Cache backend
  ; provides temporary credential storage in memory with configurable TTL.
  ;
  helper = /usr/bin/git-credential-manager
  credentialStore = cache

  ; 86400-second (24-hour) cache timeout balances security with convenience.
  ; Credentials remain valid for common development session length while
  ; ensuring regular revalidation of access tokens.
  ;
  cacheOptions = --timeout 86400

[delta]
  navigate = true

[diff]
  ; Histogram diff builds frequency maps of all lines, identifying rare lines
  ; as strong anchor points. Dynamic programming then aligns these anchors,
  ; recursively diffing regions between them. Unlike patience diff which only
  ; considers unique lines, histogram weighs lines by frequency, preserving
  ; block boundaries through moved code. Handles non-unique lines better by
  ; considering surrounding context patterns. Trades O(nÂ²) worst-case
  ; complexity for superior moved code detection versus patience's O(n log n).
  ;
  algorithm = histogram

  ; Rename detection computes similarity scores between modified/deleted and
  ; new files, applying Munkres algorithm for optimal matching above threshold.
  ; copies=true extends comparison to unmodified files as potential sources,
  ; enabling copy detection. Increases computational cost by requiring
  ; comparison against entire codebase, but preserves history through file
  ; duplication and independent modifications.
  ;
  renames = copies

[extensions]
  ; Reftable implements B-tree ref storage. Groups refs into ~1000-entry
  ; blocks. Block headers store min/max names enabling binary search. Updates
  ; modify specific blocks. Improves on traditional storage:
  ; single-file-per-ref (slow reads), packed-refs (slow writes). Provides O(log
  ; n) lookups, atomic updates, lock-free reads, prefix compression.
  ;
  refStorage = "reftable"

[feature]
  ; manyFiles optimizes large repository operations through packed-bitmap
  ; indexing, which creates compressed bit arrays tracking object reachability
  ; across commits and trees. The Directory Entry Cache (DirCache) provides
  ; memory-mapped path indexing, caching stat() results and metadata to bypass
  ; filesystem calls. Path scanning employs worker thread pools with dedicated
  ; iterators and buffers, parallelizing directory traversal. Additional
  ; mechanisms include tree object bulk-loading, path prefix compression in
  ; pack indices, and deferred parent validation.
  ;
  manyFiles = true

  ; Experimental features toggle enables access to in-development
  ; functionality. Required for testing new capabilities before they become
  ; standard, particularly protocol and storage changes.
  ;
  experimental = true

[fetch]
  ; Skipping protocol streamlines network transfer by sending recent commit
  ; timestamps (~10k) instead of full history. Server intelligently assumes
  ; older commits exist client-side, sending only necessary updates.
  ; Dramatically cuts network and CPU overhead by avoiding full history walks,
  ; though risks missing commits if assumptions fail.
  ;
  negotiationAlgorithm = skipping

[filter "lfs"]
  ; Git Large File Storage (LFS) replaces large files with text pointers,
  ; storing actual content in separate object store. Clean/smudge filters
  ; handle transparent conversion between pointer and content during
  ; checkout/commit. Process filter enables incremental transfers.
  ;
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[filter "media"]
  ; Media filter provides legacy large file handling predating LFS. Implements
  ; similar pointer/content separation but with simpler storage model.
  ; Maintained for backward compatibility with older repositories using this
  ; system.
  ;
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[gc]
  ; Commit-graph maintains precomputed metadata in an efficient binary format,
  ; tracking parent links, generation numbers, and path-based Bloom filters.
  ; Speeds up reachability queries and history traversal through constant-time
  ; generation comparisons. Scales through chunked updates - recent commits
  ; live in a fast-update tip file while history resides in larger base files.
  ;
  writeCommitGraph = true

[help]
  ; Command correction employs Levenshtein distance matching against known
  ; commands. autoCorrect=1 introduces 100ms delay before executing corrected
  ; command, allowing user abort. Particularly valuable for muscle memory typos
  ; in high-frequency commands while preserving conscious control.
  ;
  autoCorrect = 1

[init]
  ; Default branch naming affects repository initialization and template
  ; expansion. 'main' aligns with current distributed development practices
  ; while maintaining compatibility with branch name agnostic Git operations.
  ;
  defaultBranch = main

[merge]
  ; zdiff3 enriches conflict markers with original base content, revealing
  ; divergent changes clearly. Sophisticated sequence matching preserves
  ; whitespace significance. Base markers help spot unintended changes, guide
  ; resolution choices, prevent accidental content loss.
  ;
  conflictStyle = zdiff3

[pack]
  ; Pack files compress Git objects. allowPackReuse analyzes existing packs for
  ; matching objects before creating new ones, generating deltas only for
  ; missing objects. 'multi' mode reuses multiple source packs, minimizing I/O
  ; and CPU overhead during object storage.
  ;
  allowPackReuse = multi

  ; Bitmap indices precompute reachability data. Boundary traversal segments
  ; commit graph at strategic points, loading bitmap data only for required
  ; regions. Dramatically reduces memory and CPU usage when accessing recent
  ; history in old repositories by skipping bitmap loads for ancient commits.
  ;
  useBitmapBoundaryTraversal = true

[pull]
  twohead = ort

  ; Rebase pull rewrites local commits on top of upstream changes. Maintains
  ; linear history by avoiding merge commits, simplifying history traversal and
  ; conflict resolution.
  ;
  rebase = true

[push]
  autoSetupRemote = true

  ; Tag following examines annotated tags reachable from pushed commits.
  ; Implements transitive closure over tag->commit references, ensuring
  ; complete metadata transfer.
  ;
  followTags = true

[rebase]
  ; Abbreviated commands reduce rebase instruction verbosity through command
  ; aliasing. Maps full Git commands to shortened forms while preserving
  ; unambiguous operation identification.
  ;
  abbreviateCommands = true

  ; Instruction formatting preserves commit metadata through rebase operations.
  ; Injects environment variables to maintain original committer information,
  ; preventing timestamp and author discontinuities.
  ;
  instructionFormat = %s%nexec GIT_COMMITTER_DATE=\"%cI\" GIT_COMMITTER_NAME=\"%cN\" GIT_COMMITTER_EMAIL=\"%cE\" git commit --amend --no-edit%n

[rerere]
  ; ReReRe hashes conflict markers with surrounding context into signatures,
  ; storing resolutions in .git/rr-cache/. On conflicts, generates new
  ; signatures, applies cached resolutions on exact matches. Context-aware
  ; signatures prevent incorrect reuse when similar conflicts occur in
  ; different code sections. Particularly powerful for long-lived feature
  ; branches or repeated rebases where identical conflicts emerge multiple
  ; times.
  ;
  enabled = true

  ; autoUpdate stages resolved files and updates index automatically, leaving
  ; only failed resolutions unstaged. Critical during large rebases with
  ; repeated conflict patterns, eliminating manual staging overhead.
  ;
  autoUpdate = true
  enabled = true

[submodule]
  ; Recursive submodule operations traverse dependency graph depth-first.
  ; Handles nested submodule hierarchies, maintaining consistent state across
  ; all repository levels.
  ;
  recurse = true

  ; Parallel fetching distributes submodule network operations across multiple
  ; workers. Each worker maintains independent connection pool and transfer
  ; state.
  ;
  fetchJobs = 10

[url "https://github.com/"]
  ; URL rewriting intercepts remote operation URL construction. Transforms SSH
  ; URL patterns to HTTPS equivalents before connection attempt.
  ;
  insteadOf = git@github.com:
