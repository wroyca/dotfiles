; -*- mode: emacs-lisp; lexical-binding: t -*-

(defconst dotemacs--mouse-scroll-amount '((3) ((shift) . 3) ((control) . nil))
  "Amount to scroll for various mouse actions.")

(defconst dotemacs--inhibit-startup t
  "Inhibit startup screen.")

(defconst dotemacs--scratch-buffer-name "*scratch*"
  "Sratch buffer name.")

(defconst dotemacs--gui-elements '(menu-bar-mode scroll-bar-mode tool-bar-mode)
  "List of GUI elements.")

(defconst dotemacs--neovim-env-var "NVIM"
  "Environment variable set when running inside Neovim.")

;;

(defun interface ()
  (mapc (lambda (mode) (funcall mode -1)) dotemacs--gui-elements)
  ;; don't display a mode line.
  (setq-default mode-line-format nil))

(defun mouse ()
  (xterm-mouse-mode 1)
  (setq mouse-wheel-scroll-amount dotemacs--mouse-scroll-amount)
  (setq mouse-wheel-progressive-speed nil))

(defun startup ()
  (setq package-enable-at-startup nil)
  (setq inhibit-startup-echo-area-message (user-login-name)
        inhibit-startup-screen dotemacs--inhibit-startup)
  (put 'inhibit-startup-echo-area-message 'saved-value t)
  ;; When Inhibiting the startup screen, Emacs typically displays the *scratch*
  ;; buffer.
  (kill-buffer dotemacs--scratch-buffer-name))

;;

(defun inside-neovim-p ()
  (getenv dotemacs--neovim-env-var))

;;

(if (inside-neovim-p)
    (progn
      ; Unfortunately too slow.
      ; (dolist (fn '(interface mouse startup))
      ;   (add-hook 'tty-setup-hook fn)))
      (interface) (mouse) (startup))
  (kill-emacs))

;;

(custom-set-faces
 `(magit-bisect-bad                      ((t (:background nil :foreground nil))))
 `(magit-bisect-good                     ((t (:background nil :foreground nil))))
 `(magit-bisect-skip                     ((t (:background nil :foreground nil))))
 `(magit-blame-date                      ((t (:background nil :foreground nil))))
 `(magit-blame-dimmed                    ((t (:background nil :foreground nil))))
 `(magit-blame-hash                      ((t (:background nil :foreground nil))))
 `(magit-blame-heading                   ((t (:background nil :foreground nil))))
 `(magit-blame-highlight                 ((t (:background nil :foreground nil))))
 `(magit-blame-margin                    ((t (:background nil :foreground nil))))
 `(magit-blame-name                      ((t (:background nil :foreground nil))))
 `(magit-blame-summary                   ((t (:background nil :foreground nil))))
 `(magit-branch-current                  ((t (:background nil :foreground nil))))
 `(magit-branch-local                    ((t (:background nil :foreground "p.blue"  :weight bold))))
 `(magit-branch-remote                   ((t (:background nil :foreground "p.green" :weight bold))))
 `(magit-branch-remote-head              ((t (:background nil :foreground nil))))
 `(magit-branch-upstream                 ((t (:background nil :foreground nil))))
 `(magit-branch-warning                  ((t (:background nil :foreground nil))))
 `(magit-cherry-equivalent               ((t (:background nil :foreground nil))))
 `(magit-cherry-unmatched                ((t (:background nil :foreground nil))))
 `(magit-diff-added                      ((t (:background "p.green_bg" :foreground nil))))
 `(magit-diff-added-highlight            ((t (:background "p.green_bg" :foreground nil))))
 `(magit-diff-base                       ((t (:background nil :foreground nil))))
 `(magit-diff-base-highlight             ((t (:background nil :foreground nil))))
 `(magit-diff-conflict-heading           ((t (:background nil :foreground nil))))
 `(magit-diff-context                    ((t (:background nil :foreground nil))))
 `(magit-diff-context-highlight          ((t (:background nil :foreground nil))))
 `(magit-diff-file-heading               ((t (:background nil :foreground nil))))
 `(magit-diff-file-heading-highlight     ((t (:background nil :foreground nil))))
 `(magit-diff-file-heading-selection     ((t (:background nil :foreground nil))))
 `(magit-diff-hunk-heading               ((t (:background nil :foreground nil))))
 `(magit-diff-hunk-heading-highlight     ((t (:background nil :foreground nil))))
 `(magit-diff-hunk-heading-selection     ((t (:background nil :foreground nil))))
 `(magit-diff-hunk-region                ((t (:background nil :foreground nil))))
 `(magit-diff-lines-boundary             ((t (:background nil :foreground nil))))
 `(magit-diff-lines-heading              ((t (:background nil :foreground nil))))
 `(magit-diff-our                        ((t (:background nil :foreground nil))))
 `(magit-diff-our-highlight              ((t (:background nil :foreground nil))))
 `(magit-diff-removed                    ((t (:background "p.red_bg" :foreground nil))))
 `(magit-diff-removed-highlight          ((t (:background "p.red_bg" :foreground nil))))
 `(magit-diff-revision-summary           ((t (:background nil :foreground "p.green"))))
 `(magit-diff-revision-summary-highlight ((t (:background nil :foreground nil))))
 `(magit-diff-their                      ((t (:background nil :foreground nil))))
 `(magit-diff-their-highlight            ((t (:background nil :foreground nil))))
 `(magit-diff-whitespace-warning         ((t (:background nil :foreground nil))))
 `(magit-diffstat-added                  ((t (:background nil :foreground "p.green"))))
 `(magit-diffstat-removed                ((t (:background nil :foreground "p.red"))))
 `(magit-dimmed                          ((t (:background nil :foreground "p.fg_mid2"))))
 `(magit-filename                        ((t (:background nil :foreground "p.blue"))))
 `(magit-hash                            ((t (:background nil :foreground "p.fg_mid2"))))
 `(magit-head                            ((t (:background nil :foreground nil))))
 `(magit-header-line                     ((t (:background nil :foreground nil))))
 `(magit-header-line-key                 ((t (:background nil :foreground nil))))
 `(magit-header-line-log-select          ((t (:background nil :foreground nil))))
 `(magit-keyword                         ((t (:background nil :foreground nil))))
 `(magit-keyword-squash                  ((t (:background nil :foreground nil))))
 `(magit-log-author                      ((t (:background nil :foreground "p.cyan"))))
 `(magit-log-date                        ((t (:background nil :foreground nil))))
 `(magit-log-graph                       ((t (:background nil :foreground nil))))
 `(magit-mode-line-process               ((t (:background nil :foreground nil))))
 `(magit-mode-line-process-error         ((t (:background nil :foreground nil))))
 `(magit-process-ng                      ((t (:background nil :foreground nil))))
 `(magit-process-ok                      ((t (:background nil :foreground nil))))
 `(magit-reflog-amend                    ((t (:background nil :foreground nil))))
 `(magit-reflog-checkout                 ((t (:background nil :foreground nil))))
 `(magit-reflog-cherry-pick              ((t (:background nil :foreground nil))))
 `(magit-reflog-commit                   ((t (:background nil :foreground nil))))
 `(magit-reflog-merge                    ((t (:background nil :foreground nil))))
 `(magit-reflog-other                    ((t (:background nil :foreground nil))))
 `(magit-reflog-rebase                   ((t (:background nil :foreground nil))))
 `(magit-reflog-remote                   ((t (:background nil :foreground nil))))
 `(magit-reflog-reset                    ((t (:background nil :foreground nil))))
 `(magit-refname                         ((t (:background nil :foreground nil))))
 `(magit-refname-pullreq                 ((t (:background nil :foreground nil))))
 `(magit-refname-stash                   ((t (:background nil :foreground nil))))
 `(magit-refname-wip                     ((t (:background nil :foreground nil))))
 `(magit-section-heading                 ((t (:background nil :foreground "p.blue" :weight bold))))
 `(magit-section-heading-selection       ((t (:background nil :foreground nil))))
 `(magit-section-highlight               ((t (:background nil :foreground nil :weight bold))))
 `(magit-section-secondary-heading       ((t (:background nil :foreground "p.red"))))
 `(magit-sequence-done                   ((t (:background nil :foreground nil))))
 `(magit-sequence-drop                   ((t (:background nil :foreground nil))))
 `(magit-sequence-exec                   ((t (:background nil :foreground nil))))
 `(magit-sequence-head                   ((t (:background nil :foreground nil))))
 `(magit-sequence-onto                   ((t (:background nil :foreground nil))))
 `(magit-sequence-part                   ((t (:background nil :foreground nil))))
 `(magit-sequence-pick                   ((t (:background nil :foreground nil))))
 `(magit-sequence-stop                   ((t (:background nil :foreground nil))))
 `(magit-signature-bad                   ((t (:background nil :foreground nil))))
 `(magit-signature-error                 ((t (:background nil :foreground nil))))
 `(magit-signature-expired               ((t (:background nil :foreground nil))))
 `(magit-signature-expired-key           ((t (:background nil :foreground nil))))
 `(magit-signature-good                  ((t (:background nil :foreground nil))))
 `(magit-signature-revoked               ((t (:background nil :foreground nil))))
 `(magit-signature-untrusted             ((t (:background nil :foreground nil))))
 `(magit-tag                             ((t (:background nil :foreground nil))))
 `(transient-active-infix                ((t (:background nil :foreground nil :weight bold))))
 `(transient-argument                    ((t (:background nil :foreground nil :weight bold))))
 `(transient-delimiter                   ((t (:background nil :foreground nil))))
 `(transient-disabled-suffix             ((t (:background nil :foreground nil))))
 `(transient-enabled-suffix              ((t (:background nil :foreground nil))))
 `(transient-heading                     ((t (:background nil :foreground "p.yellow" :weight bold))))
 `(transient-higher-level                ((t (:background nil :foreground nil))))
 `(transient-inactive-argument           ((t (:background nil :foreground nil))))
 `(transient-inactive-value              ((t (:background nil :foreground nil))))
 `(transient-inapt-suffix                ((t (:background nil :foreground nil))))
 `(transient-key                         ((t (:background nil :foreground "p.blue"))))
 `(transient-key-exit                    ((t (:background nil :foreground "p.blue"))))
 `(transient-key-noop                    ((t (:background nil :foreground "p.blue"))))
 `(transient-key-return                  ((t (:background nil :foreground "p.blue"))))
 `(transient-key-stay                    ((t (:background nil :foreground "p.blue"))))
 `(transient-mismatched-key              ((t (:background nil :foreground nil))))
 `(transient-nonstandard-key             ((t (:background nil :foreground nil))))
 `(transient-unreachable                 ((t (:background nil :foreground nil))))
 `(transient-unreachable-key             ((t (:background nil :foreground nil))))
 `(transient-value                       ((t (:background nil :foreground nil))))
 `(header-line                           ((t (:background nil :foreground nil))))
 `(highlight                             ((t (:background "p.bg_mid2" :foreground nil ))))
 `(region                                ((t (:background nil :foreground nil))))
 `(link                                  ((t (:background nil :foreground "p.blue")))))

