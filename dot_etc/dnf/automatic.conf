[commands]
# Defines what kind of upgrade to perform when the system is scheduled to apply
# updates. By default, all available updates are installed.
#
# For minimal-impact systems (e.g., embedded or production appliances), consider
# switching to `security` to limit updates strictly to CVE-relevant patches. In
# our case, full updates are acceptable and preferred.
#
upgrade_type = default

# Prevents DNF from introducing randomized delays before initiating updates.
# This is intended to avoid network storms on large deployments, but we have no
# need for this kind of staggering in a single-machine setup.
#
random_sleep = 0

# Maximum time (in seconds) that DNF will wait for the system to be considered
# "online" before timing out. This matters primarily on boot if the network
# isn't immediately ready. Sixty seconds is generous and covers most use cases,
# including Wi-Fi reconnects and VPN hooks.
#
network_online_timeout = 60

# Automatically download updates when they become available. This ensures that
# by the time we decide (or schedule) to apply updates, everything is already
# staged locally. This avoids delays at install time and reduces exposure
# to network issues or repo flakiness during critical maintenance windows.
#
# We do this even if auto-install is also enabled, as it reduces coupling
# between download and apply phases.
#
download_updates = yes

# Applies updates automatically once they've been downloaded. While this is
# a blunt policy, it's acceptable here: the system is not latency-critical
# or sensitive to occasional background package updates.
#
# We're still opting out of automatic rebooting (see below), which gives us a
# natural checkpoint: updates can install themselves, but nothing disruptive
# happens until we explicitly step in.
#
apply_updates = yes

# Prevents the system from rebooting automatically after applying updates.
# Even if a package requires a reboot to take effect (e.g., kernel or glibc),
# we'd rather tolerate a small delay in effectiveness than risk surprise
# restarts, especially if we're mid-session.
#
# This decision shifts the responsibility to us: we must remember to reboot
# after certain updates, but we retain full control over when that happens.
#
reboot = never

# Defines the reboot command that would be used if reboots were enabled.
# While currently unused (because `reboot = never`), we've left this in place
# to document the intended behavior: a five-minute grace period with a clear
# message. This gives time to cancel if the reboot was triggered in error,
# or to wrap up ongoing work cleanly.
#
# The wording also makes it clear that the reboot is tied to system updates,
# reducing surprise or confusion if this command is ever invoked.
#
reboot_command = "shutdown -r +5 'Rebooting after applying package updates'"


[emitters]
# We haven't specified a custom system name, so the default (the system's
# hostname) will be used when emitting messages. For most single-node setups,
# this is sufficient. If we ever centralize reporting (e.g., across containers,
# VMs, etc), assigning an explicit name here would help distinguish sources in
# logs or inboxes.
#
# system_name = my-host

# We emit messages via `stdio` only. This is a minimal but effective strategy:
# messages are sent to standard output, which means that when run under `cron`,
# they get delivered via local system mail (typically to root).
#
# This avoids the complexity of setting up an MTA or external SMTP relay,
# and still surfaces output when something goes wrong. It's also easy to
# redirect or suppress if needed.
#
# We deliberately omit `email`, `motd`, and `command_email`. Those are better
# suited to multi-user or multi-system environments where local mail isn't
# guaranteed to be delivered or read.
#
emit_via = stdio


[email]
# This block remains unused in our current configuration, since `emit_via`
# does not include `email`. We retain it as a scaffold, with the minimum
# viable configuration to allow switching over later if needed.
#
# The values here assume a local mail transfer agent (e.g., Postfix or
# Exim) is listening on localhost:25 and does not require encryption
# or authentication. This is a common baseline for self-managed systems.
#
# If this is ever changed to use an external relay or authenticated SMTP,
# these values (especially `email_tls`) will need to be adjusted.
#
email_from = root@example.com
email_to = root
email_host = localhost
email_port = 25
email_tls = no


[command]
# This block provides an escape hatch for emitting messages via an arbitrary
# shell command. It's not active unless explicitly enabled via `emit_via`,
# but we leave the structure in place for potential future use.
#
# The format strings mirror Python's `.format()` API, and the command is
# passed a single quoted `body` argument. This can be used to log messages,
# trigger hooks, or integrate with external systems in non-email-based ways.
#
# We haven't configured anything here yetâ€”commented out for now.
#
# command_format = "cat"
# stdin_format = "{body}"


[command_email]
# Like `[command]`, this section allows message delivery via a custom command.
# The difference is that this one is email-specific: instead of using SMTP
# directly, it calls an external program (e.g., `sendmail`, `msmtp`, `mailx`)
# and passes all the necessary parts of the message.
#
# This can be useful when a minimal system doesn't run a full MTA, or when we
# want more control over headers, retries, or formatting. We're not using this
# currently, but we've left it filled in to reduce setup friction later.
#
# Note: even if the values are correct, this section has no effect unless
# `command_email` is included in `emit_via`.
#
email_from = root@example.com
email_to = root


[base]
# This section allows us to override settings from `dnf.conf`, but we're only
# adjusting one value: the debug level.
#
# We've set it to `1`, which suppresses low-level noise without completely
# hiding useful diagnostics. This is a middle ground: it lets routine update
# output stay readable while still surfacing actual problems if they occur.
#
# If more detailed logging is needed (e.g., to investigate repository issues
# or dependency churn), this can be temporarily increased.
#
debuglevel = 1
