[main]
# Instructs DNF to disable any repository it cannot synchronize, instead of
# failing outright. This makes the update process more resilient in the face of
# transient issues, that is, brief outages won't prevent all other repositories
# from being used.
#
# We enable this to ensure background or scheduled updates proceed even when one
# mirror temporarily misbehaves. Visibility into partial syncs is still
# available via logs and notification emitters. Note that this does *not* affect
# missing packages during dependency resolution; it only applies to repository
# metadata access.
#
skip_if_unavailable=True

# Forces DNF to ignore the order suggested by metalinks and instead probe for
# the fastest mirror on our own. This is useful in practice: while mirrorlists
# often reflect geographical proximity, they don't always reflect actual
# throughput or availability.
#
# Enabling this introduces a bit of overhead during metadata fetches, but helps
# reduce long-tail download stalls, especially for larger packages or during
# initial setup. For systems with stable connectivity and modest update
# frequency, the speedup outweighs the extra probes.
#
fastestmirror=True

# Raises the minimum acceptable download rate to 2MB/s. If throughput drops
# below this level for too long (as defined by the socket timeout), the download
# is aborted and another mirror may be tried.
#
# This is a fairly aggressive threshold. We assume reliable connectivity (LAN,
# fiber, or datacenter), and prefer to fail early rather than crawl through
# multi-minute stalls. It's also helpful in distinguishing between actual mirror
# slowness and network-level degradation.
#
minrate=2M

# Allows DNF to download up to 20 packages concurrently. This is the maximum
# permitted value and well-suited to systems with fast I/O and network
# bandwidth. In practice, this can dramatically reduce total install time for
# update batches, particularly when many small packages are involved.
#
# Note that we assume the system has sufficient file descriptor and bandwidth
# headroom. If bottlenecks or mirror throttling become a problem, lowering this
# may improve overall stability at the cost of throughput.
#
max_parallel_downloads=20
